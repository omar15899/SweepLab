#!/bin/bash
#PBS -N run_heat_big
# usa 1 núcleo con ~16 GB
#PBS -q jumbo
#PBS -l nodes=1:ppn=1,mem=15800mb,walltime=240:00:00
# avisos por correo: begin/end/abort
#PBS -m bea
#PBS -M ok24@ic.ac.uk
# mezcla stdout/err y guarda el log del PBS en tu home principal
#PBS -j oe
#PBS -o /home/ma/o/ok24/logs/${PBS_JOBID}.log
# exporta tu entorno
#PBS -V

set -euo pipefail

# --- hilo único (BLAS/OpenMP) ---
export OMP_NUM_THREADS=1 OPENBLAS_NUM_THREADS=1 MKL_NUM_THREADS=1 \
       BLIS_NUM_THREADS=1 VECLIB_MAXIMUM_THREADS=1 NUMEXPR_NUM_THREADS=1 \
       GOTO_NUM_THREADS=1

# --- activar firedrake del sistema ---
source /usr/local/firedrake/bin/activate

# --- caches de usuario (en tu home principal) ---
export HOME=/home/ma/o/ok24
export XDG_CACHE_HOME="$HOME/.cache"
export PYOP2_CACHE_DIR="$XDG_CACHE_HOME/pyop2"
export TSFC_KERNEL_CACHE_DIR="$XDG_CACHE_HOME/tsfc"
export TSFC_CACHE_DIR="$XDG_CACHE_HOME/tsfc"
export FIREDRAKE_TSFC_KERNEL_CACHE_DIR="$XDG_CACHE_HOME/tsfc"
export PYOP2_ALWAYS_REBUILD=1
mkdir -p "$PYOP2_CACHE_DIR" "$TSFC_KERNEL_CACHE_DIR" /home/ma/o/ok24/logs

# --- staging local rápido (tmp del nodo) + destino final en clustor2 ---
RUN_LOCAL="/tmp/sdc-${USER}-${PBS_JOBID}/"
OUT_FINAL="/home/clustor2/ma/o/${USER}/solver_results/heatfiles/"
mkdir -p "$RUN_LOCAL" "$OUT_FINAL"

# el solver escribirá H5/JSON/LOG dentro de RUN_LOCAL
export SDC_OUTPUT_DIR="$RUN_LOCAL"

# --- log del PBS en fichero único ---
exec >"/home/ma/o/ok24/logs/${PBS_JOBID}.log" 2>&1
set -x
echo "[START] $(date) host=$(hostname) job=${PBS_JOBID} user=${USER}"
echo "[ENV] SDC_OUTPUT_DIR=$SDC_OUTPUT_DIR"

# --- función: sincronización periódica a clustor2 (h5/json/log de PETSc) ---
sync_once() {
  rsync -a \
    --include='*/' \
    --include='*.h5' \
    --include='*.json' \
    --include='*_log.txt' \
    --exclude='*' \
    "$RUN_LOCAL"/ "$OUT_FINAL"/
}

# cada 5 minutos
sync_loop() {
  while sleep 300; do
    echo "[SYNC] $(date)"
    sync_once || true
  done
}

# asegura sync al salir sí o sí
finish() {
  set +e
  echo "[COPY FINAL] $(date)"
  sync_once
  rm -rf "$RUN_LOCAL"
  echo "[END] $(date)"
}
trap finish EXIT

# lanza un hilo en background que sincroniza cada 5 minutos
sync_loop &

# --- directorio de trabajo (tu home principal) ---
cd /home/ma/o/ok24

# --- comprobaciones rápidas ---
which python3
python3 -V
echo "[RUN] sdc_heat_equation.py start"

# ejecuta tu solver con el entorno de cachés ya publicado
time python3 -u - <<'PY'
import os, pathlib, runpy
home="/home/ma/o/ok24"
# refuerza caches dentro de Python antes de cualquier import
env = {
    "XDG_CACHE_HOME": f"{home}/.cache",
    "PYOP2_CACHE_DIR": f"{home}/.cache/pyop2",
    "TSFC_KERNEL_CACHE_DIR": f"{home}/.cache/tsfc",
    "TSFC_CACHE_DIR": f"{home}/.cache/tsfc",
    "FIREDRAKE_TSFC_KERNEL_CACHE_DIR": f"{home}/.cache/tsfc",
    "PYOP2_ALWAYS_REBUILD": "1",
}
os.environ.update(env)
for d in ("PYOP2_CACHE_DIR","TSFC_KERNEL_CACHE_DIR"):
    pathlib.Path(os.environ[d]).mkdir(parents=True, exist_ok=True)

import firedrake
print("[PY] firedrake OK")
runpy.run_path("/home/ma/o/ok24/clusterscripts/sdc_heat_equation.py", run_name="__main__")
print("[PY] done.")
PY

echo "[RUN] sdc_heat_equation.py end"