#!/bin/bash
# run_heat_direct_cl2_hdf5fix.pbs  escribe directo en clustor2 con fix de hdf5
set -euo pipefail

USR="ok24"
HOME_DIR="/home/ma/o/${USR}"
PY_SCRIPT="${HOME_DIR}/clusterscripts/sdc_heat_equation.py"
BASE_DEST="/home/clustor2/ma/o/${USR}/solver_results/heatfiles/all_cluster_runs"
LOGDIR="/home/clustor2/ma/o/${USR}/logs"
MAIL_TO="ok24@ic.ac.uk"

SMOKE_DEFAULT="${SMOKE:-0}"
MAX_SIM_DEFAULT="${MAX_SIM:-128}"
WALLTIME_DEFAULT="${WALLTIME:-500:00:00}"

if [ -z "${PBS_JOBID:-}" ]; then
  if [ "${SMOKE_DEFAULT}" = "1" ]; then
    TOTAL=4
  else
    TOTAL=$(python3 - <<'PY'
NCELLS=[2,4,8,16,32,64,128,256,512]
DT=[1e-1,1e-2,1e-3,1e-4,1e-5]
M=list(range(1,11))
print(len(NCELLS)*len(DT)*len(M))
PY
)
  fi

  declare -A MEM=(
    [standard]=1900mb
    [medium]=7900mb
    [jumbo]=15500mb
    [large32]=32gb
    [large64]=64gb
    [large128]=128gb
    [large256]=256gb
    [large512]=512gb
    [firedrake]=12900mb
  )

  Q=${FORCE_QUEUE:-standard}
  qstat -Q "$Q" >/dev/null 2>&1 || Q=standard

  mkdir -p "$LOGDIR"

  MEMREQ="${MEM_REQUEST:-${MEM[$Q]:-7900mb}}"
  if [[ "$Q" == "large64" && "$MEMREQ" =~ ^[[:space:]]*64[[:space:]]*gb[[:space:]]*$ ]]; then
    MEMREQ="65535mb"
  fi

  if [ -n "${FORCE_PROP:-}" ]; then
    FEAT="${FORCE_PROP//,/:}"
    QSUB_RES=(-l "nodes=1:ppn=1:${FEAT}" -l "mem=${MEMREQ}")
  else
    QSUB_RES=(-l "select=1:ncpus=1:mem=${MEMREQ}")
  fi

  echo "[SUBMIT] TOTAL=${TOTAL} queue=${Q} mem=${MEMREQ} cap=${MAX_SIM_DEFAULT} feature=${FORCE_PROP:-none} direct=clustor2"
  exec qsub -q "$Q" -N run_heat_all "${QSUB_RES[@]}" -l walltime="${WALLTIME_DEFAULT}" \
    -m bea -M "${MAIL_TO}" -j oe -o "${LOGDIR}" \
    -v SMOKE="${SMOKE_DEFAULT}" -v FORCE_QUEUE="${FORCE_QUEUE:-}" -v FORCE_PROP="${FORCE_PROP:-}" \
    -v MAX_SIM="${MAX_SIM_DEFAULT}" -v MEM_REQUEST="${MEM_REQUEST:-}" \
    -t 0-$((TOTAL-1))%${MAX_SIM_DEFAULT} "$0"
fi

set -x
umask 0022
echo "[START] $(date) host=$(hostname) job=${PBS_JOBID} arr=${PBS_ARRAYID:-0} user=${USER}"

# hdf5 sobre nfs
export HDF5_USE_FILE_LOCKING=FALSE
export HDF5_DISABLE_VERSION_CHECK=2

# tmp y petsc tmp dentro del destino en cl2
DEST="${BASE_DEST}/run_${PBS_ARRAYID}"
mkdir -p "$DEST"
export TMPDIR="${DEST}"
export PETSC_TMPDIR="${DEST}"

# hilos a 1
export OMP_NUM_THREADS=1 OPENBLAS_NUM_THREADS=1 MKL_NUM_THREADS=1 \
       BLIS_NUM_THREADS=1 VECLIB_MAXIMUM_THREADS=1 NUMEXPR_NUM_THREADS=1 \
       GOTO_NUM_THREADS=1

# activar entorno
if [ -f "/usr/local/firedrake/bin/activate" ]; then
  source /usr/local/firedrake/bin/activate
elif [ -f "${HOME_DIR}/firedrake/bin/activate" ]; then
  source "${HOME_DIR}/firedrake/bin/activate"
elif [ -f "/vol/firedrake/bin/activate" ]; then
  source /vol/firedrake/bin/activate
else
  module load firedrake 2>/dev/null || true
fi

mkdir -p "$LOGDIR" "$BASE_DEST"
cd "${HOME_DIR}"
which python3
python3 -V

# preflight de escritura y hdf5 rapido
echo "[PRE] touch en ${DEST}"
touch "${DEST}/.__write_test__" || { echo "[ERR] no se puede escribir en ${DEST}"; exit 1; }
python3 - <<'PY' || { echo "[WARN] h5py no disponible para test, continuamos"; }
import os, sys
p=os.environ.get("DEST") or sys.exit(0)
try:
    import h5py, numpy as np
    f=h5py.File(os.path.join(p,".__h5_test__.h5"),"w")
    f["x"]=np.arange(10)
    f.close()
    print("[PRE] h5py ok")
except Exception as e:
    print("[PRE][HDF5] fallo:", e)
PY
rm -f "${DEST}/.__write_test__" "${DEST}/.__h5_test__.h5" 2>/dev/null || true

# escribir directo en cl2
export SDC_OUTPUT_DIR="$DEST"
export SDC_DEST_DIR="$DEST"

# trabajo python
python3 -u - <<'PY'
import os, json, runpy
from itertools import product
from pathlib import Path

SMOKE = os.environ.get("SMOKE","0") == "1"

if SMOKE:
    NCELLS=[8]; DT=[5e-2]; M=[6]
else:
    NCELLS=[2,4,8,16,32,64,128,256,512]
    DT=[1e-1,1e-2,1e-3,1e-4,1e-5]
    M=list(range(1,11))

TFINAL=1.0
DEGREE_LIST=[1,2,3,4]

idx = int(os.environ.get("PBS_ARRAYID","0"))
combos = list(product(NCELLS, DT, M))
n, dt, m = combos[idx]
sweeps = m

dest = Path(os.environ["SDC_DEST_DIR"])
dest.mkdir(parents=True, exist_ok=True)

variants = []
for prectype in ("MIN-SR-FLEX", "MIN-SR-NS"):
    for is_par in (True, False):
        for deg in DEGREE_LIST:
            variants.append({
                "n_cells": n,
                "dt": dt,
                "M": m,
                "sweeps": sweeps,
                "Tfinal": TFINAL,
                "degree": deg,
                "is_parallel": is_par,
                "prectype": prectype,
                "analysis": True,
                "mode": "checkpoint",
                "folder_name": "all_cluster_runs",
                "path_name": str(dest),
            })

script = Path("/home/ma/o/ok24/clusterscripts/sdc_heat_equation.py")
if not script.exists():
    raise FileNotFoundError(f"script no encontrado {script}")

print(f"[INFO] writing to {dest}")
for v in variants:
    os.environ["SDC_PARAMS_JSON"] = json.dumps(v)
    runpy.run_path(str(script), run_name="__main__")

print("[PY] todas las variantes finalizadas")
PY

echo "[END] $(date)"
